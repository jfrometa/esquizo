// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "dart run orm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator client {
//   provider   = "dart run orm"
//   output     = "../lib/_generated_prisma_client"
//   // engineType = "flutter"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }



model Tenant {
  id          String   @id @default(cuid()) // The id is of type String
  name        String   @unique
  description String
  todos       Todos[]
  users       User[]
  clients     Client[]
}

model Client {
  id          String @id @default(cuid())
  name        String @unique
  description String
  tenant      Tenant @relation(fields: [tenantId], references: [id])
  tenantId    String
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  tenant        Tenant          @relation(fields: [tenantId], references: [id])
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenantId  String
  todos     Todos[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Todos {
  id       Int      @id @default(autoincrement())
  title    String   @default("no title")
  complete Boolean  @default(false)
  created  DateTime @default(now())
  User     User?    @relation(fields: [userId], references: [id])
  userId   String? // This is correctly set to String?
  Tenant   Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId String? // Ensure this is also String to match Tenant's id
}
